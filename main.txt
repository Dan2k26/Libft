//  gcc -Wall -Wextra -Werror
//  norminette -R CheckForbiddenHeader

//ISALPHA

#include <stdio.h>
#include <ctype.h>

int	main(void)
{
	char	c;

	c = '1';
	printf("Original: %d", isalpha(c));
	printf("\nFunción: %d", ft_isalpha(c));
	c = 'q';
	printf("\nOriginal: %d", isalpha(c));
	printf("\nFunción: %d", ft_isalpha(c));
	c =0212;
	printf("\nOriginal: %d", isalpha(c));
	printf("\nFunción: %d", ft_isalpha(c));
	return (0);
}

//ISDIGIT

#include <stdio.h>
#include <ctype.h>

int	main(void)
{
	char	c;

	c = 's';
	printf("Original: %d", isdigit(c));
	printf("\nFunción: %d", ft_isdigit(c));
	c = 'q';
	printf("\nOriginal: %d", isdigit(c));
	printf("\nFunción: %d", ft_isdigit(c));
	c =48;
	printf("\nOriginal: %d", isdigit(c));
	printf("\nFunción: %d", ft_isdigit(c));
	return (0);
}

//ISALNUM

#include <stdio.h>
#include <ctype.h>

int	main()
{
    char c;
    int result;

    c = '5';
    result = isalnum(c);
    printf("ORIGINAL %c: %d\n", c, result);
	result = ft_isalnum(c);
    printf("FUNCION %c: %d\n", c, result);
    c = 96;
    result = isalnum(c);
    printf("ORIGINAL %c: %d\n", c, result);
	result = ft_isalnum(c);
    printf("FUNCION %c: %d\n", c, result);
    c = 'l';
    result = isalnum(c);
    printf("ORIGINAL %c: %d\n", c, result);
	result = ft_isalnum(c);
    printf("FUNCION %c: %d\n", c, result);
    c = '+';
    result = isalnum(c);
    printf("ORIGINAL %c: %d\n", c, result);
	result = ft_isalnum(c);
    printf("FUNCION %c: %d\n", c, result);
    return 0;
}

//ISASCII

#include <stdio.h>
#include <ctype.h>

int	main()
{
	char	c;

	c = 'n';
	printf("Original: %d", isascii(c));
	printf("\nFunción: %d", ft_isascii(c));
	c = '1';
	printf("\nOriginal: %d", isascii(c));
	printf("\nFunción: %d", ft_isascii(c));
	c = 0200;
	printf("\nOriginal %c: %d", c, isascii(c));
	printf("\nFunción: %d", ft_isascii(c));
	return (0);
}

//ISPRINT

#include <ctype.h>
#include <stdio.h>

int main(void)
{
    char c;

    c = 'Q';
    printf("ORIGINAL %c: %d\n", c, isprint(c));
	printf("FUNCION %c: %d\n", c, ft_isprint(c));
    c = 0200;
    printf("\nORIGINAL %c: %d\n", c, isprint(c));
	printf("FUNCION %c: %d\n", c, ft_isprint(c));
	c = '1';
    printf("\nORIGINAL %c: %d\n", c, isprint(c));
	printf("FUNCION %c: %d\n", c, ft_isprint(c));
	c = 0x80;
    printf("\nORIGINAL %c: %d\n", c, isprint(c));
	printf("FUNCION %c: %d\n", c, ft_isprint(c));
	c = 97;
    printf("\nORIGINAL %c: %d\n", c, isprint(c));
	printf("FUNCION %c: %d\n", c, ft_isprint(c));
	c = 0x78;
    printf("\nORIGINAL %c: %d\n", c, isprint(c));
	printf("FUNCION %c: %d\n", c, ft_isprint(c));
    return (0);
}

//STRLEN

#include <stdio.h>
#include <string.h>

int main()
{
    char a[20]="Pro\ngñram";
    char b[20]={'P','r',48,'g','r','a','m','\0'};
	int	num;

    printf("Length of string a = %zu \n",strlen(a));
	num = ft_strlen(a);
	printf("Length of string a = %d \n",num);
    printf("Length of string b = %zu \n",strlen(b));
	num = ft_strlen(b);
	printf("Length of string a = %d \n",num);
    return 0;
}

//MEMSET

#include <stdio.h>
#include <string.h>

int	main(void)
{
	char *ptr = NULL;
    char str[11] = "hola mundo\0";
	ptr = &str[0];
	
    printf("\nAntes memset(): %s\n", str);
	ft_memset(str, '.', 4);
    printf("Despues  memset(): %s", str);
    return (0);
}

//BZERO

#include <stdio.h>
#include <string.h>

int	main(void)
{
	char *ptr = NULL;
	char *ptr1 = NULL;
    char str[11] = {"hola mundo\0"};
	char str1[11] = {"hola mundo\0"};
	ptr = &str[0];
	ptr1 = &str1[0];

    printf("\nAntes bzero(): %s\n", str1);
	bzero(str1 + 6, 1);
    printf("Despues  bzero(): %s", str1);

	printf("\nAntes bzerox(): %s\n", str);
	ft_bzero(str + 6, 1);
    printf("Despues  bzerox(): %s", str);
    return (0);
}

//MEMCPY

#include <stdio.h>
#include <string.h>

int	main(void)
{
	char *ptr = NULL;
	char *ptr1 = NULL;
    char str[15] = {"hola mundozzzz\0"};
	char str1[11] = {"Inesperado\0"};
	ptr = &str[0];
	ptr1 = &str1[0];

    printf("ORIGINAL\nAntes memcpy(): %s\n", ptr1);
	memcpy(ptr1 + 5, ptr, 6);
    printf("Despues  memcpy(): %s\n", ptr1);

	printf("FUNCION\nAntes memcpy(): %s\n", ptr1);
	ft_memcpy(ptr1 + 5, str, 6);
    printf("Despues  memcpy(): %s", ptr1);
    return (0);
}

//MEMMOVE

#include <stdio.h>
#include <string.h>

int	main(void)
{
	char str[] = "foo-barcelona";
    memmove(&str[4],&str[3],3);
	printf("\n%s", str);
	ft_memmove(&str[4],&str[3],3);
	printf("\n%s\n", str);
    return (0);
}

//STRLCPY

#include <stdio.h>
#include <string.h>

int	main(void)
{
	char	*dest;
	char	*src;
	char	c[]= "123456\0";
	char	c1[] = "abcdeefgh\0";
	unsigned int	num;

	dest = NULL;
	src = NULL;
	dest = c;
	src = c1;
	printf("ANTES:\ndst: %s\nsrc: %s\n", dest, src);
	num = ft_strlcpy(dest, src, 2);
	printf("DESPUES:\ndst: %s\nsrc: %s\n", dest, src);

	return(0);
}

//STRLCAT

#include <stdio.h>
#include <string.h>

int	main(void)
{
	char	*dest;
	char	*src;
	char	c[]= "";
	char	c1[] = "1";
	unsigned int	num;

	dest = NULL;
	src = NULL;
	dest = c;
	src = c1;
	printf("ANTES:\ndst: %s\nsrc: %s\n", dest, src);
	num = strlcat(dest, src, 15);
	printf("%d DESPUES:\ndst: %s\nsrc: %s\n\n", num,dest, src);

	printf("ANTES:\ndst: %s\nsrc: %s\n", dest, src);
	num = ft_strlcat(dest, src, 15);
	printf("%d DESPUES:\ndst: %s\nsrc: %s\n", num,dest, src);
	return(0);
}

//TOUPPER

#include <stdio.h>
#include <ctype.h>

int main()
{
    char c, result;

    c = 'a';
    result = ft_tolower(c);
    printf("tolower(%c) = %c\n", c, result);

    c = 100;
    result = ft_tolower(c);
    printf("tolower(%c) = %c\n", c, result);

    c = '\n';
    result = ft_tolower(c);
    printf("tolower(%c) = %c\n", c, result);

    return 0;
}

//TOLOWER

#include <stdio.h>
#include <ctype.h>

int main()
{
    char c, result;

    c = 'Z';
    result = ft_tolower(c);
    printf("tolower(%c) = %c\n", c, result);

    c = 'm';
    result = ft_tolower(c);
    printf("tolower(%c) = %c\n", c, result);

    c = '1';
    result = ft_tolower(c);
    printf("tolower(%c) = %c\n", c, result);

    return 0;
}

//STRCHR

#include <stdio.h>
#include <string.h>

int main ()
{
   const char str[] = "?in the string po1inted.to by s";
   char *ret;

   ret = strchr(str, 't'); 
   printf("ORIGINAL (t): %s\n", ret);
   ret = ft_strchr(str, 't'); 
   printf("FUNCION  (t): %s\n\n", ret);
   ret = strchr(str, '?'); 
   printf("ORIGINAL (?): %s\n", ret);
   ret = ft_strchr(str, '?'); 
   printf("FUNCION  (?): %s\n\n", ret);
   ret = strchr(str, '.'); 
   printf("ORIGINAL (.): %s\n", ret);
   ret = ft_strchr(str, '.'); 
   printf("FUNCION  (.): %s\n\n", ret);
   ret = strchr(str, 49); 
   printf("ORIGINAL (1): %s\n", ret);
   ret = ft_strchr(str, 49); 
   printf("FUNCION  (1): %s\n\n", ret);
   ret = strchr(str, 'w'); 
   printf("ORIGINAL (w): %s\n", ret);
   ret = ft_strchr(str, 'w'); 
   printf("FUNCION  (w): %s\n\n", ret);
   return(0);
}

//STRRCHR

#include <stdio.h>
#include <string.h>

int main ()
{
   const char str[] = "fun?ction.s 1lo1cate the ?terminat.ing";
   char *ret;

   ret = strrchr(str, 't'); 
   printf("ORIGINAL (t): %s\n", ret);
   ret = ft_strrchr(str, 't'); 
   printf("FUNCION  (t): %s\n\n", ret);
   ret = strrchr(str, '?'); 
   printf("ORIGINAL (?): %s\n", ret);
   ret = ft_strrchr(str, '?'); 
   printf("FUNCION  (?): %s\n\n", ret);
   ret = strrchr(str, '.'); 
   printf("ORIGINAL (.): %s\n", ret);
   ret = ft_strrchr(str, '.'); 
   printf("FUNCION  (.): %s\n\n", ret);
   ret = strrchr(str, 49); 
   printf("ORIGINAL (1): %s\n", ret);
   ret = ft_strrchr(str, 49); 
   printf("FUNCION  (1): %s\n\n", ret);
   ret = strrchr(str, 'w'); 
   printf("ORIGINAL (w): %s\n", ret);
   ret = ft_strrchr(str, 'w'); 
   printf("FUNCION  (w): %s\n\n", ret);
   return(0);
}

//STRNCMP

#include<stdio.h>
#include<string.h>

int main()
{
	int n = 6;

	char str1[] = "Hello World!";
	char str2[] = "Hell1 World!";
	char str3[] = "Hell~ World!";
	//char str4[] = {'H', 'e', 'l', 'l', 254, ' ', 'W', 'o', 'r', 'l', 'd', '!'};
	char str5[] = {'H', 'e', 'l', 'l', 0, ' ', 'W', 'o', 'r', 'l', 'd', '!'};
	char str6[] = {'H', 'e', 'l', 'l', 0, ' ', '0', 'o', 'r', 'l', 'd', '!'};
	char str7[] = "Hello 0orld!";

	printf("INPUT (n = 6):\nStr 1: %s\nStr 2: %s\nOUTPUT (expected 0):\n%d\n", str1, str1, ft_strncmp(str1, str1, n));
	printf("INPUT (n = 6):\nStr 1: %s\nStr 2: %s\nOUTPUT (expected 62):\n%d\n", str1, str2, ft_strncmp(str1, str2, n));
	printf("INPUT (n = 6):\nStr 1: %s\nStr 2: %s\nOUTPUT (expected -15):\n%d\n", str1, str3, ft_strncmp(str1, str3, n));
	printf("INPUT (null char is the different char) (n = 6):\nStr 1: %s\nStr 2: Hell\\00 World!\nOUTPUT (expected 111):\n%d\n", str1, ft_strncmp(str1, str5, n));
	printf("INPUT (null char and different char after) (n = 6):\nStr 1: Hell\\00 World!\nStr 2: Hell\\00 0orld!\nOUTPUT (expected 0):\n%d\n", ft_strncmp(str5, str6, n));
	printf("INPUT (the different char is i = 7) (n = 6):\nStr 1: %s\nStr 2: %s\nOUTPUT (expected 0):\n%d\n", str1, str7, ft_strncmp(str1, str7, n));
}

//MEMCHR

#include <stdio.h>
#include <string.h>

int main ()
{
   const char str[] = "fun?ction.s 1lo1cate the ?terminat.ing";
   char *ret;

   ret = memchr(str, 't', 6); 
   printf("ORIGINAL (t): %s\n", ret);
   ret = ft_memchr(str, 't', 6); 
   printf("FUNCION  (t): %s\n\n", ret);
   ret = memchr(str, '?', 38); 
   printf("ORIGINAL (?): %s\n", ret);
   ret = ft_memchr(str, '?', 38); 
   printf("FUNCION  (?): %s\n\n", ret);
   ret = memchr(str, '.', 38); 
   printf("ORIGINAL (.): %s\n", ret);
   ret = ft_memchr(str, '.', 38); 
   printf("FUNCION  (.): %s\n\n", ret);
   ret = memchr(str, 49, 38); 
   printf("ORIGINAL (1): %s\n", ret);
   ret = ft_memchr(str, 49, 38); 
   printf("FUNCION  (1): %s\n\n", ret);
   ret = memchr(str, 'w', 38); 
   printf("ORIGINAL (w): %s\n", ret);
   ret = ft_memchr(str, 'w', 38); 
   printf("FUNCION  (w): %s\n\n", ret);
   return(0);
}

//MEMCMP

#include<stdio.h>
#include<string.h>

int main(void)
{
	int n = 6;

	char str1[] = "Hello World!";
	char str2[] = "Hell1 World!";
	char str3[] = "Hell~ World!";
	char str5[] = {'H', 'e', 'l', 'l', 0, ' ', 'W', 'o', 'r', 'l', 'd', '!'};
	char str6[] = {'H', 'e', 'l', 'l', 0, ' ', '0', 'o', 'r', 'l', 'd', '!'};
	char str7[] = "Hello 0orld!";

	printf("INPUT (n = 6):\nStr 1: %s\nStr 2: %s\nOUTPUT (expected 0):\n%d\n", str1, str1, ft_memcmp(str1, str1, n));
	printf("INPUT (n = 6):\nStr 1: %s\nStr 2: %s\nOUTPUT (expected 62):\n%d\n", str1, str2, ft_memcmp(str1, str2, n));
	printf("INPUT (n = 6):\nStr 1: %s\nStr 2: %s\nOUTPUT (expected -15):\n%d\n", str1, str3, ft_memcmp(str1, str3, n));
	printf("INPUT (null char is the different char) (n = 6):\nStr 1: %s\nStr 2: Hell\\00 World!\nOUTPUT (expected 111):\n%d\n", str1, ft_memcmp(str1, str5, n));
	printf("INPUT (null char and different char after) (n = 6):\nStr 1: Hell\\00 World!\nStr 2: Hell\\00 0orld!\nOUTPUT (expected 0):\n%d\n", ft_memcmp(str5, str6, n));
	printf("INPUT (the different char is i = 7) (n = 6):\nStr 1: %s\nStr 2: %s\nOUTPUT (expected 0):\n%d\n", str1, str7, ft_memcmp(str1, str7, n));
}

//ATOI

#include <stdio.h>
#include <stdlib.h>

int main () 
{
	printf("ORIGINAL (9858985): %d\n", ft_atoi("9858985"));
	printf("FUNCION  (9858985): %d\n\n", ft_atoi("9858985"));
	printf("ORIGINAL (-453665475): %d\n", ft_atoi("-453665475"));
	printf("FUNCION  (-453665475): %d\n\n", ft_atoi("-453665475"));
	printf("ORIGINAL (-+5489): %d\n", ft_atoi("-+5489"));
	printf("FUNCION  (-+5489): %d\n\n", ft_atoi("-+5489"));
	printf("ORIGINAL (-2147483648): %d\n", ft_atoi("-2147483648"));
	printf("FUNCION  (-2147483648): %d\n\n", ft_atoi("-2147483648"));
	printf("ORIGINAL (+214748364832): %d\n", ft_atoi("+214748364832"));
	printf("FUNCION  (+214748364832): %d\n\n", ft_atoi("+214748364832"));
	printf("ORIGINAL (0): %d\n", ft_atoi("0"));
	printf("FUNCION  (0): %d\n\n", ft_atoi("0"));
	printf("ORIGINAL (98t890): %d\n", ft_atoi("98t890"));
	printf("FUNCION  (98t890): %d\n\n", ft_atoi("98t890"));
	printf("ORIGINAL (-1): %d\n", ft_atoi("-1"));
	printf("FUNCION  (-1): %d\n\n", ft_atoi("-1"));
    return(0);
}

//CALLOC

#include <stdio.h>
#include <stdlib.h>

int main() {
   char *ptr;
    char c[] = "Hola mundo";
    ptr = ft_calloc(10,sizeof(char));
	printf("%s     %p\n", ptr, ptr);
   ft_memcpy(ptr, c, sizeof(c));
   printf("%s     %p", ptr, ptr);
   return 0;
}

//STRDUP

#include <stdio.h>
#include <stdlib.h>

int	main(void)
{
	char	*ptr;
	char	*ptrPrueba;
	char	str[] = "Function first appeared in 4.4BSD.";

	ptr = strdup(str);
	printf("PTR: %s\nDIRECCION: %p\n", ptr, ptr);
	free(ptr);
	ptrPrueba = ft_strdup(str);
	printf("PTR: %s\nDIRECCION: %p", ptrPrueba, ptrPrueba);
	return (0);
}

